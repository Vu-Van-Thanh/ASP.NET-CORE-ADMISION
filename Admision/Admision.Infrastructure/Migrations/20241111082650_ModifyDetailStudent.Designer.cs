// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Admission.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241111082650_ModifyDetailStudent")]
    partial class ModifyDetailStudent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Admission.Core.Domain.Entities.Article", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("ArticleId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = new Guid("a14fb4b4-9886-437b-add1-e4429424f6a2"),
                            Content = "Để hỗ trợ các thí sinh đưa ra quyết định về việc lựa chọn nguyện vọng một cách hợp lý nhất, Đại học Bách khoa Hà Nội đưa ra dự báo điểm chuẩn cho 64 chương trình đào tạo tuyển sinh năm 2024.",
                            DateCreated = new DateTime(2024, 10, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Đề án tuyển sinh 2024-2025"
                        },
                        new
                        {
                            ArticleId = new Guid("53aa8629-51a7-4810-8e69-0cc8a4c4ebd3"),
                            Content = "Trường Đại học Bách khoa Hà Nội thông báo lịch thi tuyển sinh cho năm 2024. Các thí sinh cần chú ý theo dõi để không bỏ lỡ.",
                            DateCreated = new DateTime(2024, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Thông báo lịch thi tuyển sinh 2024"
                        },
                        new
                        {
                            ArticleId = new Guid("32460e72-2ba1-420f-b32c-53f4e2e01be3"),
                            Content = "Để đăng ký dự thi, các thí sinh cần chuẩn bị hồ sơ đầy đủ theo hướng dẫn của trường. Hãy đọc kỹ để tránh thiếu sót.",
                            DateCreated = new DateTime(2024, 10, 3, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Hướng dẫn chuẩn bị hồ sơ đăng ký"
                        },
                        new
                        {
                            ArticleId = new Guid("18fc6183-8a57-4deb-9d26-f28034395fc1"),
                            Content = "Điểm chuẩn vào các chương trình đào tạo của Đại học Bách khoa Hà Nội trong năm 2023 đã được công bố. Các thí sinh có thể tham khảo để chuẩn bị cho năm sau.",
                            DateCreated = new DateTime(2024, 9, 30, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Điểm chuẩn năm 2023"
                        },
                        new
                        {
                            ArticleId = new Guid("9aa5e0da-57d8-4393-b9c9-5a30374f0703"),
                            Content = "Đại học Bách khoa Hà Nội hiện có nhiều chương trình đào tạo nổi bật, đáp ứng nhu cầu thị trường lao động.",
                            DateCreated = new DateTime(2024, 10, 2, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            Title = "Các chương trình đào tạo nổi bật"
                        },
                        new
                        {
                            ArticleId = new Guid("24e5b629-cd94-4364-bb64-63e5a7e72dda"),
                            Content = "Đánh giá chất lượng chương trình đào tạo tại Đại học Bách khoa Hà Nội được thực hiện hàng năm để cải tiến và nâng cao chất lượng giảng dạy.",
                            DateCreated = new DateTime(2024, 10, 4, 15, 45, 0, 0, DateTimeKind.Unspecified),
                            Title = "Đánh giá chương trình đào tạo"
                        });
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentCommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("ParentCommentID");

                    b.HasIndex("PostID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("GroupID");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            GroupID = new Guid("986c9e54-9ef0-4ce9-b714-b3f8f67234f0"),
                            Name = "Viện Khoa học và Công nghệ Vật liệu"
                        },
                        new
                        {
                            GroupID = new Guid("996e2db4-7341-408f-a57c-bc39f74207bd"),
                            Name = "Viện Cơ khí"
                        },
                        new
                        {
                            GroupID = new Guid("63690708-42e3-4887-89b5-e3e7c5cfa8ef"),
                            Name = "Viện Điện tử Viễn thông"
                        },
                        new
                        {
                            GroupID = new Guid("e726d97a-0cc2-4e98-ac73-e91b3eb1b645"),
                            Name = "Viện Công nghệ Thông tin và Truyền thông"
                        },
                        new
                        {
                            GroupID = new Guid("ae0c4e13-922f-4ff5-aa8d-b2b650ced61e"),
                            Name = "Viện Công nghệ Sinh học"
                        },
                        new
                        {
                            GroupID = new Guid("6a7a706e-55fb-4675-a721-7d5ab0ee583d"),
                            Name = "Viện Kỹ thuật Hóa học"
                        },
                        new
                        {
                            GroupID = new Guid("4b1cf118-6612-4d47-97fe-8d6055f3bf67"),
                            Name = "Viện Quản trị Kinh doanh"
                        },
                        new
                        {
                            GroupID = new Guid("caab93de-f077-4f0f-af70-431ffb630caf"),
                            Name = "Viện Khoa học Máy tính"
                        },
                        new
                        {
                            GroupID = new Guid("d9bce23c-ac7f-4491-8820-9702eb6ecf11"),
                            Name = "Viện Xây dựng"
                        },
                        new
                        {
                            GroupID = new Guid("1bf4c6b1-b102-4063-9396-8823a70ff7b5"),
                            Name = "Viện Kỹ thuật Điện và Điện tử"
                        },
                        new
                        {
                            GroupID = new Guid("6fbc24f2-713a-42c9-980c-77c46de81761"),
                            Name = "Viện Cơ học"
                        },
                        new
                        {
                            GroupID = new Guid("e51c655a-25b5-4596-8ba8-1f711436febf"),
                            Name = "Viện Toán học và Tin học Ứng dụng"
                        },
                        new
                        {
                            GroupID = new Guid("7ffe994d-da38-4136-9f79-4e6695fd9696"),
                            Name = "Trường Kỹ thuật Cơ khí"
                        },
                        new
                        {
                            GroupID = new Guid("6f20eaf9-0c3a-41ef-ab74-4e9de7add63a"),
                            Name = "Trường Kỹ thuật Điện"
                        },
                        new
                        {
                            GroupID = new Guid("2084a35b-6ceb-4974-8c1d-823e95bf02a7"),
                            Name = "Trường Kỹ thuật Công nghệ Thông tin"
                        },
                        new
                        {
                            GroupID = new Guid("5b97f946-5446-404a-8ea7-f72de1f1bf08"),
                            Name = "Trường Kỹ thuật Xây dựng"
                        },
                        new
                        {
                            GroupID = new Guid("8bbab4e8-2cc2-4489-a8bd-8baf31894cec"),
                            Name = "Trường Kỹ thuật Hóa học"
                        },
                        new
                        {
                            GroupID = new Guid("b11ba393-c8bc-4496-a02b-fce57326100e"),
                            Name = "Trường Kỹ thuật Cơ khí Động lực"
                        },
                        new
                        {
                            GroupID = new Guid("6e041819-6114-4781-94b9-6892fe124f93"),
                            Name = "Trường Kinh tế và Quản lý"
                        });
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.HighSchool", b =>
                {
                    b.Property<Guid>("HighSchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DepartmentOfEducation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HighSchoolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("HighSchoolID");

                    b.ToTable("HighSchools");

                    b.HasData(
                        new
                        {
                            HighSchoolID = new Guid("514174fd-7b08-4089-9768-a1410f9398e7"),
                            Address = "117 Hùng Vương Thị trấn Diên Khánh",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Hoàng Hoa Thám",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("ff95ca35-53df-45b5-a025-a70681972850"),
                            Address = "03 Lý Tự Trọng - Phường Lộc Thọ - Thành phố Nha Trang - Tỉnh Khánh Hòa.",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Lý Tự Trọng",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("45bce675-3c48-4b36-958d-9e78c67ffcb9"),
                            Address = "Phước Tuy - Diên Phước - Diên Khánh",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Nguyễn Thái Học",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("ba2bb140-6287-4243-95fe-3711240161f7"),
                            Address = "số 01 đường 16/7; tổ dân phố 16",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Nguyễn Trãi",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("6d85738c-463d-4591-8e5e-57df29320357"),
                            Address = "đường Nguyễn Thái Học",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Phan Bội Châu",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("df72fbe5-5039-4b46-8bec-f7fd4fc24614"),
                            Address = "08-Trường Chinh TT. Cam Đức H. Cam Lâm T. Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Trần Bình Trọng",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("b4034916-fd21-42a7-a631-0dbdf2816371"),
                            Address = "Đường Đinh Tiên Hoàng Phường Ninh Hiệp Thị xã Ninh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Trần Cao Vân",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("0e753b01-815e-48fe-8fdb-550baa35e7e6"),
                            Address = "75C Nguyễn Thị Minh Khai- Nha Trang - Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Nguyễn Thiện Thuật",
                            Type = "Tư thục"
                        },
                        new
                        {
                            HighSchoolID = new Guid("9f0596a4-0556-478a-91c2-4034cf7c41b9"),
                            Address = "10 Phước Long",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT DL Lê Thánh Tôn",
                            Type = "Tư thục"
                        },
                        new
                        {
                            HighSchoolID = new Guid("d88b8099-d17a-499d-b1e0-c138b76fc97f"),
                            Address = "",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Lê Hồng Phong",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("e1a2a3ec-2330-44c7-8a60-291fbac9dc3e"),
                            Address = "Tân Xương2  Suối Cát  Cam Lâm  Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Đoàn Thị Điểm",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("4b33c784-b8f6-4502-b4c8-e56f2b4fff7b"),
                            Address = "362 Hùng Vương- TT Vạn Giã- Vạn Ninh - Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Huỳnh Thúc Kháng",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("e15837a2-5c5b-4b52-a48f-5bebbd33293b"),
                            Address = "02 Hòn Chồng",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Hoàng Văn Thụ",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("b7eb5f5b-9396-4cf2-b90d-3268a889e869"),
                            Address = "90 Hùng Vương Thị trấn Khánh Vĩnh huyện Khánh Vĩnh",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Lạc Long Quân",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("95d0969f-1da2-4fd8-a79e-1635dea0274d"),
                            Address = "Quốc lộ 26 xã Ninh Phụng thị xã Ninh Hòa tĩnh Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Nguyễn Chí Thanh",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("39141de0-6e65-4d20-a5cf-cc8ca5ccc3e8"),
                            Address = "284 Nguyễn Công Trứ - Cam Nghĩa - Cam Ranh - Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Ngô Gia Tự",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("9ea71901-ff11-4823-97b1-55323dcab175"),
                            Address = "32 Hàn Thuyên",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Nguyễn Văn Trỗi",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("08ac0d47-4482-4abe-ab30-b549ff8e3bf3"),
                            Address = "Xã Vạn Khánh Huyện Vạn Ninh Tỉnh Khánh Hòa.",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Tô Văn Ơn",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("ed3635cc-0e76-4be5-8f5a-243903feb1d8"),
                            Address = "188 Hòn Khói phường Ninh Diêm thị xã Ninh Hòa tỉnh Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Trần Quý Cáp",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("bdff377d-b000-4f30-9464-e35deeb19d6c"),
                            Address = "100 Nguyễn Trãi Cam Đức Cam Lâm Khánh Hoà",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Nguyễn Huệ",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("84dd1dbe-0af3-44fe-8dc9-2479dd0881e2"),
                            Address = "183 lý Thường kiệt Tổ dp số 8 Vạn Giã-Vạn Ninh-Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Nguyễn Thị Minh Khai",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("a949624c-0843-45cf-9759-f464f53a0b0f"),
                            Address = "386 Đường 3 tháng 4 Phường cam Linh Thành Phố Cam ranhtỉnh Khánh hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Trần Hưng Đạo",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("e9445ece-9731-4a83-830b-005a0d3f7d96"),
                            Address = "Mỹ Lợi - Ninh Lộc - Ninh Hòa - Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Tôn Đức Thắng",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("217772d7-611a-45c9-9346-31a8b0e5857e"),
                            Address = "05 Trường Sơn Phường Vĩnh Nguyên Thành phố Nha Trang",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Phạm Văn Đồng",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("2f19a6e1-cf10-43a4-9350-8c44a13a18ea"),
                            Address = "Lê Duẩn - Tô Hạp - Khánh Sơn - Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Khánh Sơn",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("39bed8c0-b543-4858-a180-3d95e887c490"),
                            Address = "02 Hòn Chồng P.Vĩnh Phước TP.Nha Trang",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường PT DTNT tỉnh",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("b1c755e4-1102-4403-ae5c-34f6d5558943"),
                            Address = "67 Yersin",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Chuyên Lê Quý Đôn",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("c8c74838-a0e0-428c-8fff-b48b96e15d76"),
                            Address = "Số 11 Đường Nguyễn Quyền - Phường Vĩnh Hải - TP Nha Trang- Tỉnh Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường PT Hermann Gmeiner",
                            Type = "Tư thục"
                        },
                        new
                        {
                            HighSchoolID = new Guid("9a574c91-a796-46c4-b56a-1bc8d0d4e369"),
                            Address = "Đường A1 KĐT Vĩnh Điềm Trung Vĩnh Hiệp Tp.Nha Trang",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường Tiểu học THCS THPT Quốc Tế Việt Nam Singapore",
                            Type = "Tư thục"
                        },
                        new
                        {
                            HighSchoolID = new Guid("bfb353e8-ac8b-4225-8eab-3c8c714f2a16"),
                            Address = "Tổ 6 Thôn Phú Thạnh xã Vĩnh Thạnh Tp. Nha Trang tỉnh Khánh Hòa",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THPT Hà Huy Tập",
                            Type = "Công lập"
                        },
                        new
                        {
                            HighSchoolID = new Guid("a7d11b3c-8d8c-4701-ba77-22bc6d164581"),
                            Address = "25 Hai Bà Trưng",
                            DepartmentOfEducation = "Sở Giáo dục và Đào tạo Khánh Hòa",
                            HighSchoolName = "Trường THCS và THPT iSchool Nha Trang",
                            Type = "Tư thục"
                        });
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.InformationOfApplied", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmissionMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("GPA10")
                        .HasColumnType("float");

                    b.Property<double>("GPA11")
                        .HasColumnType("float");

                    b.Property<double>("GPA12")
                        .HasColumnType("float");

                    b.Property<Guid>("MajorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestRoom")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MajorID");

                    b.HasIndex("StudentID");

                    b.ToTable("InformationOfApplieds");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Major", b =>
                {
                    b.Property<Guid>("MajorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MajorId");

                    b.HasIndex("SchoolID");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaID");

                    b.HasIndex("ArticleID");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            MediaID = new Guid("3f64434c-0c5e-4b28-9e87-ef0562c9536c"),
                            ArticleID = new Guid("a14fb4b4-9886-437b-add1-e4429424f6a2"),
                            MediaType = "image",
                            MediaUrl = "https://firebasestorage.googleapis.com/v0/b/tsdhbk-632bb.appspot.com/o/slide2_1.png?alt=media&token=bc2ae7c2-f47e-4883-a600-7cc5c34e9c5e"
                        },
                        new
                        {
                            MediaID = new Guid("c87767bd-dbfa-4416-a500-ee8bf14227f2"),
                            ArticleID = new Guid("53aa8629-51a7-4810-8e69-0cc8a4c4ebd3"),
                            MediaType = "video/mp4",
                            MediaUrl = "https://www.youtube.com/watch?v=xLrHnIiAack"
                        },
                        new
                        {
                            MediaID = new Guid("9f2b04f0-4a38-4abc-823d-b83e618ff4ad"),
                            ArticleID = new Guid("32460e72-2ba1-420f-b32c-53f4e2e01be3"),
                            MediaType = "image",
                            MediaUrl = "https://firebasestorage.googleapis.com/v0/b/tsdhbk-632bb.appspot.com/o/HY%2Ftd6.jpg?alt=media&token=a3878a22-1a97-40ae-bbbe-2cd3eac03cf9"
                        },
                        new
                        {
                            MediaID = new Guid("266cc1fd-8d23-461a-bbed-17d8d77ad97b"),
                            ArticleID = new Guid("18fc6183-8a57-4deb-9d26-f28034395fc1"),
                            MediaType = "video/mp4",
                            MediaUrl = "https://www.youtube.com/watch?v=8yVew7OrJdI"
                        },
                        new
                        {
                            MediaID = new Guid("bd669f86-a9c3-476e-8975-1efccf6ad3c5"),
                            ArticleID = new Guid("9aa5e0da-57d8-4393-b9c9-5a30374f0703"),
                            MediaType = "image",
                            MediaUrl = "https://firebasestorage.googleapis.com/v0/b/tsdhbk-632bb.appspot.com/o/xttn%2FPOST-NG-a-NG-Ia-M-XTTN-2024-XT-6188-2429-1718331174.png?alt=media&token=6aba61bc-23b6-4f31-8d8d-5f81c1586951"
                        });
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasNewPosts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NoId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InitialExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ResultID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentID");

                    b.HasIndex("ResultID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.HasKey("PostID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("GroupID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.PostMedia", b =>
                {
                    b.Property<Guid>("PostID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostID", "MediaID");

                    b.ToTable("PostMedias");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Relative", b =>
                {
                    b.Property<Guid>("RelativeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Career")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Commune")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Ethnic")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("IdentityCard")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PlaceOfJob")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Province")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RelativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RelativeID");

                    b.HasIndex("CountryID");

                    b.HasIndex("StudentID");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Result", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResultId");

                    b.HasIndex("StudentID");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.School", b =>
                {
                    b.Property<Guid>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Location")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("SchoolDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SchoolID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicPerformance10")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AcademicPerformance11")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AcademicPerformance12")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CandidateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commune")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Conduct10")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Conduct11")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Conduct12")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Ethnic")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("HealthStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("HighSchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HouseholdType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IndentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Member")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MembershipBook")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MembershipCard")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OutstandingAchievements")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Partisan")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PlaceIssued")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceJoining")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicySubjectType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Province")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Talent")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("StudentID");

                    b.HasIndex("CountryID");

                    b.HasIndex("HighSchoolID");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.StudentMedia", b =>
                {
                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentMediaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentMediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID", "StudentMediaID");

                    b.ToTable("StudentMedias");
                });

            modelBuilder.Entity("Admission.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Admission.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryID = new Guid("14629847-905a-4a0e-9abe-80b61655c5cb"),
                            CountryName = "Philippines"
                        },
                        new
                        {
                            CountryID = new Guid("4ac574fb-85a9-4159-9f2b-053b2bc6fc7e"),
                            CountryName = "Việt Nam"
                        },
                        new
                        {
                            CountryID = new Guid("56bf46a4-02b8-4693-a0f5-0a95e2218bdc"),
                            CountryName = "Thailand"
                        },
                        new
                        {
                            CountryID = new Guid("12e15727-d369-49a9-8b13-bc22e9362179"),
                            CountryName = "China"
                        },
                        new
                        {
                            CountryID = new Guid("8f30bedc-47dd-4286-8950-73d8a68e5d41"),
                            CountryName = "Palestinian Territory"
                        },
                        new
                        {
                            CountryID = new Guid("501c6d33-1bbe-45f1-8fbd-2275913c6218"),
                            CountryName = "China"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Student", "Student")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Admission.Core.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentID");

                    b.HasOne("Admission.Core.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.InformationOfApplied", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Major", "Major")
                        .WithMany("InformationOfApplieds")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admission.Core.Domain.Entities.Student", "Student")
                        .WithMany("InformationOfApplieds")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Major", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.School", "School")
                        .WithMany("majors")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Media", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Article", "Article")
                        .WithMany("medias")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Post", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Student", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admission.Core.Domain.Entities.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.PostMedia", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Post", "Post")
                        .WithMany("PostMedias")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Relative", b =>
                {
                    b.HasOne("Entities.Country", "Country")
                        .WithMany("Relatives")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admission.Core.Domain.Entities.Student", "Student")
                        .WithMany("Relatives")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Result", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Student", b =>
                {
                    b.HasOne("Entities.Country", "Country")
                        .WithMany("Students")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Admission.Core.Domain.Entities.HighSchool", "HighSchool")
                        .WithMany("Students")
                        .HasForeignKey("HighSchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("Admission.Core.Domain.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");

                    b.Navigation("HighSchool");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.StudentMedia", b =>
                {
                    b.HasOne("Admission.Core.Domain.Entities.Student", "student")
                        .WithMany("StudentMedias")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Admission.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Article", b =>
                {
                    b.Navigation("medias");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Group", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.HighSchool", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Major", b =>
                {
                    b.Navigation("InformationOfApplieds");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostMedias");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.School", b =>
                {
                    b.Navigation("majors");
                });

            modelBuilder.Entity("Admission.Core.Domain.Entities.Student", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InformationOfApplieds");

                    b.Navigation("Posts");

                    b.Navigation("Relatives");

                    b.Navigation("Results");

                    b.Navigation("StudentMedias");
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Navigation("Relatives");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
